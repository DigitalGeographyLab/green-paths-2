# Greetings traveller! This is a example template for user configuration file.
#
# 
#
# here are the instructions for the configuration file
# the config consist of 5 main categories: 
# - general project settings
# - osm_network
# - data_sources
# - routing
# - analysing

# The indentation is important, here are some general guidelines:
# the general project settings should not have any indentation
# other category 'headers' should either not have indentation but their content should have valid amount of indentation
# data sources have a list of data sources, each data source should have the same amount of indentation and the name parameter should start with a dash
# the same applies for routing > exposure_parameters and analysing > cumulative_ranges > <data_source_name>


# optional parameters can be left out (no need for the key either)
# the default values used by GP2 are used if the optional parameters are left out. The default values are in config.py

# * * *
# NOTICE: the keys need to be exactly the same as in the example. also the indentation is important. The order of the keys does not matter. 
# * * *



# DETAILED DESCRIPTIONS BY CATEGORY, first the mandatory parameters are listed, then the optional ones: 

# GENERAL PROJECT SETTINGS:

# - (mandatory) project_crs: the crs of the project, this is the target crs where everything will be projected to during the pipelines

# - (optional) datas_coverage_safety_percentage: the percentage of the data sources that should have data in order to continue the analysis.
# if this is not give, will use GP2 default value. 

# - (optional) save_to_cache: if the data should be saved to cache or not. The final results are always saved to cache.



# OSM NETWORK:

# - osm_network: HEADER. Should have the following keys

#         - (mandatory) osm_pbf_file_path: the path to the osm pbf file

#         - (mandatory) original_crs: the crs of the osm network

#         - (optional) filter_columns: the columns that should be kept from the osm network

#         - (optional) segment_sampling_points_amount: optional but recommended! The amount of points that should be sampled from the segments.
#         for each segment, the points are sampled evenly along the segment and their mean value is taken as the exposure value of the segment. 



# DATA SOURCES:

# - data_sources: HEADER. List of values. Each should have the following keys

#         - (mandatory) name: the name of the data source

#         - (mandatory) filepath: the path to the data source file

#         - (mandatory) min_data_value: the minimum value of the data source. This should be the theorotical minimum value of the data source.
#         if we would use the min value from data, we would leave out the NOT FOUND data which could be lower than the FOUND min value.
#         say X data goes from 0-100, if the data we find goes from 20-50, we would consider 50 as the 100% best/worst exposure, even thought 100 would be the best/worst exposure.

#         - (mandatory) max_data_value: the maximum value of the data source. This should be the theorotical maximum value of the data source. Same logic as with min_data_value.
#         if we would use the max value from data, we would leave out the NOT FOUND data which could be higher than the FOUND max value.

#         - (mandatory) good_exposure: if the data source is good for exposure analysis or bad. Good exposures are e.g. greenery and bad e.g. noise and air pollution.
#         in the routing the good exposures are used as negative values making the segments preferred. The bad exposures are used as positive values making the segments avoided.

#         - (mandatory) data_column: the name of the data column in the vector data source. Should have numerical values. This is what the exposure values are based on.

#         - (mandatory) raster_cell_resolution: the resolution of the raster cells in meters (e.g. 10 = 10mx10m). This is very important for the exposure analysis.
#         user should define this based on the data source and the area of interest. For example, if the data source is very detailed, the resolution should be higher.
#         these raster pixels are used to calculate the exposure values for the segments.
#         NOTICE: If this is given to a raster data source, the raster will be reprojected to the project crs and resampled to the given resolution.

#         - (mandatory) original_crs: the crs of the data source.

#         - (optional, recommended) data_type: NOTICE: this is optional because GP2 will try to infer the data type from the file extension.
#         if this is not successfull, the program will crash. For robustness, it is recommended to always give the data type.
#
#         the type of the data source. This can be one of the following:
#                 - vector: A vector data source. This can be any vector
#                   format supported by OMat, including GeoPackage,
#                   Shapefile, GeoJSON, and CSV.
#                 - raster: A raster data source. This can be any raster
#                   format supported by OMat, including GeoPackage,
#                   GeoTIFF, and PNG.

#         - (optional) layer_name: the name of the layer in the vector data source. If not found, will use the 1st layer found.

#         - (optional) data_buffer: if given, add the buffer around the data objects, in meters. This can be used to make the area of interest larger for datas.
#         Notice: this only affects the vector data sources.

#         - (optional) save_raster_file: if the raster file should be saved to the cache or not. Mostly for testing and visualizing purposes.

#         - (optional) custom_processing_function: a custom processing function that can be used to process the data source before the exposure analysis.
#         this is needed if the data source is not in the correct format for the exposure analysis. The function should be defined in the custom_processing_functions.py file.
#         Mostly this is not needed and shouldn't be used, requires manual programming. Use case: converting netcdf files to tif files, scaling and offsetting the values etc.
#         best practice is to use proper raster files that are ready for the exposure analysis.



# ROUTING:

# - routing: HEADER. Should have the following keys

#         - (mandatory) transport_mode: the transport mode for the routing. Can be either walking or cycling.

#         - (mandatory) origins: the path to the origins file. This can be either a vector file or a csv file. The file should have the coordinates of the origins.

#         - (mandatory) destinations: the path to the destinations file. This can be either a vector file or a csv file. The file should have the coordinates of the destinations.

#         - (optional, mandatory) od_lon_name: optional for georeferenced data: shp, gpkg, mandatory for csv. The column name of the longitude column in the origins file.

#         - (optional, mandatory) od_lat_name: optional for georeferenced data: shp, gpkg, mandatory for csv. The column name of the latitude column in the origins file.

#         - (mandatory) od_crs: The crs of the origins and destinations files.

#         - (mandatory) exposure_parameters: HEADER. List of values. Each should have the following keys:

#                 - name (mandatory): the name of the data source (should be the same as in the data_sources)

#                 - sensitivity (mandatory): the sensitivity of the data source. This is used as a weight in the exposure value calculations for routing.
#                 The sensitivity should be a positive number. The higher the number, the more the data source affects the exposure value of the segment
#                 The formula used in routing is: base_travel_time_of_segment + (base_travel_time_of_segment * sensitivity * exposure_value_of_segment)

#                 - allow_missing_data (optional, experimental): if the missing data should be allowed or not. If this is True, the segments with missing data will be ignored in the exposure analysis.
#                 default is true. If this is False, the missing data will crash the routing. This is experimental and should be used with caution. In most cases this should be True. Better not to use this.



# ANALYSING:

# - analysing: HEADER. Should have the following keys

#         - (optional) keep_geometry: if the geometry of the segments should be kept in the final results. If this is False, the geometry will be removed from the final results.
#         this is useful if the geometry is not needed in the final results. This can save some memory and processing time. Default is True.

#         - (optional) cumulative_ranges: HEADER. List of values. Each should have the following

#                 - name (mandatory): the name of the data source (should be the same as in the data_sources)

#                 - a list of ranges. Each range should have two values: the minimum value and the maximum value. The ranges should be in ascending order.
#                 The ranges are used to calculate the cumulative exposure values for the segments. The cumulative exposure values are calculated for each range.
#                 if the value is out of any range, the value will be used as the "category" key. The cumulative exposure values are calculated for each range.


# IMPORTANT: Where ever a data name is used, it need to be the same in all places and be found from all necessary places. Missmatching or missing names will crash the program.
# Notice that the yml is very strict in it's syntax! 


# OTHER INSTRUCTIONS:
# use descriptor to describe the data source. This is useful for the user to understand what the data source is about.
# use validator to validate the actual user_config.yaml file. This is useful for the user to understand if the file is valid or not.
# validator should be run before the actual analysis. If the file is not valid, the program will crash. The user should fix the file and run the validator again.



# * * * 



# EXAMPLE VALID CONFIG FILE:

# mandatory and optional are marked in the comments

# notice that the paths are examples
# notice the indentation and the keys
# they need to match this example!

project_crs: 3879 # mandatory
datas_coverage_safety_percentage: 80 # optional, recommended
save_to_cache: False # optional

osm_network:
  osm_pbf_file_path: path/to/user_network.osm.pbf # mandatory
  original_crs: 4326 # mandatory
  filter_columns: ["id"] # optional
  segment_sampling_points_amount: 5 # optional, recommended

data_sources:

  - name: shade # mandatory
    filepath: path/to/shadows.tif # mandatory
    data_type: raster # optional, recommended
    original_crs: 3007 # mandatory
    min_data_value: 0 # mandatory
    max_data_value: 0.3333333432674408 # mandatory
    good_exposure: True # mandatory

  - name: gvi # mandatory
    filepath: path/to/greenery_points.gpkg
    data_type: vector # optional, recommended
    original_crs: 3879 # mandatory
    layer_name: Helsinki_4326 # optional, recommended
    data_column: Gvi_Mean # mandatory
    min_data_value: 0.0096875 # mandatory
    max_data_value: 86.28875 # mandatory
    good_exposure: True # mandatory
    data_buffer: 10 # optional, only for vector datas, in meters
    raster_cell_resolution: 20 # mandatory
    save_raster_file: True # optional

  - name: aqi # mandatory
    filepath: path/to/allPollutants_2023-12-15T04.nc # mandatory
    data_type: raster # optional, recommended
    original_crs: 4326 # mandatory
    data_column: AQI  # mandatory
    min_data_value: 0 # mandatory
    max_data_value: 5 # mandatory
    good_exposure: False # mandatory
    raster_cell_resolution: 10 # optional
    save_raster_file: True # optional
    custom_processing_function: convert_aq_nc_to_tif_and_scale_offset # optional



routing:
    transport_mode: walking
    origins: path/to/origins_points.gpkg
    od_lon_name: longitude # mandatory for csv, optional for others
    od_lat_name: latitude # mandatory for csv, optional for others
    destinations: path/to/destinations_points.shp
    od_crs: 4326 # mandatory
    exposure_parameters:
      - name: shade # mandatory
        sensitivity: 1.5 # mandatory
        allow_missing_data: True # optional, experimental

      - name: aqi # mandatory
        sensitivity: 2 # mandatory
        allow_missing_data: True # optional, experimental

      - name: gvi # mandatory
        sensitivity: 5 # mandatory
        allow_missing_data: True # optional, experimental



analysing:
  keep_geometry: True # optional
  cumulative_ranges: # optional
    aqi: # mandatory, if given, should be the same as in the data_sources
      - [0, 0.99] # mandatory
      - [1, 1.99] # ...
      - [2, 2.99] # ...
      - [3, 3.99] # ...
      - [4, 5] # mandatory